// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2018 15:38:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    media_movel2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module media_movel2_vlg_sample_tst(
	clkFPGA,
	dado,
	insereDado,
	sampler_tx
);
input  clkFPGA;
input [9:0] dado;
input  insereDado;
output sampler_tx;

reg sample;
time current_time;
always @(clkFPGA or dado or insereDado)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module media_movel2_vlg_check_tst (
	accDado,
	out,
	PWM,
	selDado,
	tuo,
	sampler_rx
);
input  accDado;
input [31:0] out;
input  PWM;
input  selDado;
input [31:0] tuo;
input sampler_rx;

reg  accDado_expected;
reg [31:0] out_expected;
reg  PWM_expected;
reg  selDado_expected;
reg [31:0] tuo_expected;

reg  accDado_prev;
reg [31:0] out_prev;
reg  PWM_prev;
reg  selDado_prev;
reg [31:0] tuo_prev;

reg  accDado_expected_prev;
reg [31:0] out_expected_prev;
reg  selDado_expected_prev;
reg [31:0] tuo_expected_prev;

reg  last_accDado_exp;
reg [31:0] last_out_exp;
reg  last_selDado_exp;
reg [31:0] last_tuo_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	accDado_prev = accDado;
	out_prev = out;
	PWM_prev = PWM;
	selDado_prev = selDado;
	tuo_prev = tuo;
end

// update expected /o prevs

always @(trigger)
begin
	accDado_expected_prev = accDado_expected;
	out_expected_prev = out_expected;
	selDado_expected_prev = selDado_expected;
	tuo_expected_prev = tuo_expected;
end



// expected selDado
initial
begin
	selDado_expected = 1'bX;
end 

// expected accDado
initial
begin
	accDado_expected = 1'bX;
end 
// expected out[ 31 ]
initial
begin
	out_expected[31] = 1'bX;
end 
// expected out[ 30 ]
initial
begin
	out_expected[30] = 1'bX;
end 
// expected out[ 29 ]
initial
begin
	out_expected[29] = 1'bX;
end 
// expected out[ 28 ]
initial
begin
	out_expected[28] = 1'bX;
end 
// expected out[ 27 ]
initial
begin
	out_expected[27] = 1'bX;
end 
// expected out[ 26 ]
initial
begin
	out_expected[26] = 1'bX;
end 
// expected out[ 25 ]
initial
begin
	out_expected[25] = 1'bX;
end 
// expected out[ 24 ]
initial
begin
	out_expected[24] = 1'bX;
end 
// expected out[ 23 ]
initial
begin
	out_expected[23] = 1'bX;
end 
// expected out[ 22 ]
initial
begin
	out_expected[22] = 1'bX;
end 
// expected out[ 21 ]
initial
begin
	out_expected[21] = 1'bX;
end 
// expected out[ 20 ]
initial
begin
	out_expected[20] = 1'bX;
end 
// expected out[ 19 ]
initial
begin
	out_expected[19] = 1'bX;
end 
// expected out[ 18 ]
initial
begin
	out_expected[18] = 1'bX;
end 
// expected out[ 17 ]
initial
begin
	out_expected[17] = 1'bX;
end 
// expected out[ 16 ]
initial
begin
	out_expected[16] = 1'bX;
end 
// expected out[ 15 ]
initial
begin
	out_expected[15] = 1'bX;
end 
// expected out[ 14 ]
initial
begin
	out_expected[14] = 1'bX;
end 
// expected out[ 13 ]
initial
begin
	out_expected[13] = 1'bX;
end 
// expected out[ 12 ]
initial
begin
	out_expected[12] = 1'bX;
end 
// expected out[ 11 ]
initial
begin
	out_expected[11] = 1'bX;
end 
// expected out[ 10 ]
initial
begin
	out_expected[10] = 1'bX;
end 
// expected out[ 9 ]
initial
begin
	out_expected[9] = 1'bX;
end 
// expected out[ 8 ]
initial
begin
	out_expected[8] = 1'bX;
end 
// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// expected tuo[ 31 ]
initial
begin
	tuo_expected[31] = 1'bX;
end 
// expected tuo[ 30 ]
initial
begin
	tuo_expected[30] = 1'bX;
end 
// expected tuo[ 29 ]
initial
begin
	tuo_expected[29] = 1'bX;
end 
// expected tuo[ 28 ]
initial
begin
	tuo_expected[28] = 1'bX;
end 
// expected tuo[ 27 ]
initial
begin
	tuo_expected[27] = 1'bX;
end 
// expected tuo[ 26 ]
initial
begin
	tuo_expected[26] = 1'bX;
end 
// expected tuo[ 25 ]
initial
begin
	tuo_expected[25] = 1'bX;
end 
// expected tuo[ 24 ]
initial
begin
	tuo_expected[24] = 1'bX;
end 
// expected tuo[ 23 ]
initial
begin
	tuo_expected[23] = 1'bX;
end 
// expected tuo[ 22 ]
initial
begin
	tuo_expected[22] = 1'bX;
end 
// expected tuo[ 21 ]
initial
begin
	tuo_expected[21] = 1'bX;
end 
// expected tuo[ 20 ]
initial
begin
	tuo_expected[20] = 1'bX;
end 
// expected tuo[ 19 ]
initial
begin
	tuo_expected[19] = 1'bX;
end 
// expected tuo[ 18 ]
initial
begin
	tuo_expected[18] = 1'bX;
end 
// expected tuo[ 17 ]
initial
begin
	tuo_expected[17] = 1'bX;
end 
// expected tuo[ 16 ]
initial
begin
	tuo_expected[16] = 1'bX;
end 
// expected tuo[ 15 ]
initial
begin
	tuo_expected[15] = 1'bX;
end 
// expected tuo[ 14 ]
initial
begin
	tuo_expected[14] = 1'bX;
end 
// expected tuo[ 13 ]
initial
begin
	tuo_expected[13] = 1'bX;
end 
// expected tuo[ 12 ]
initial
begin
	tuo_expected[12] = 1'bX;
end 
// expected tuo[ 11 ]
initial
begin
	tuo_expected[11] = 1'bX;
end 
// expected tuo[ 10 ]
initial
begin
	tuo_expected[10] = 1'bX;
end 
// expected tuo[ 9 ]
initial
begin
	tuo_expected[9] = 1'bX;
end 
// expected tuo[ 8 ]
initial
begin
	tuo_expected[8] = 1'bX;
end 
// expected tuo[ 7 ]
initial
begin
	tuo_expected[7] = 1'bX;
end 
// expected tuo[ 6 ]
initial
begin
	tuo_expected[6] = 1'bX;
end 
// expected tuo[ 5 ]
initial
begin
	tuo_expected[5] = 1'bX;
end 
// expected tuo[ 4 ]
initial
begin
	tuo_expected[4] = 1'bX;
end 
// expected tuo[ 3 ]
initial
begin
	tuo_expected[3] = 1'bX;
end 
// expected tuo[ 2 ]
initial
begin
	tuo_expected[2] = 1'bX;
end 
// expected tuo[ 1 ]
initial
begin
	tuo_expected[1] = 1'bX;
end 
// expected tuo[ 0 ]
initial
begin
	tuo_expected[0] = 1'bX;
end 
// generate trigger
always @(accDado_expected or accDado or out_expected or out or PWM_expected or PWM or selDado_expected or selDado or tuo_expected or tuo)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected accDado = %b | expected out = %b | expected PWM = %b | expected selDado = %b | expected tuo = %b | ",accDado_expected_prev,out_expected_prev,PWM_expected_prev,selDado_expected_prev,tuo_expected_prev);
	$display("| real accDado = %b | real out = %b | real PWM = %b | real selDado = %b | real tuo = %b | ",accDado_prev,out_prev,PWM_prev,selDado_prev,tuo_prev);
`endif
	if (
		( accDado_expected_prev !== 1'bx ) && ( accDado_prev !== accDado_expected_prev )
		&& ((accDado_expected_prev !== last_accDado_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accDado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accDado_expected_prev);
		$display ("     Real value = %b", accDado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_accDado_exp = accDado_expected_prev;
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end
	if (
		( out_expected_prev[8] !== 1'bx ) && ( out_prev[8] !== out_expected_prev[8] )
		&& ((out_expected_prev[8] !== last_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[8] = out_expected_prev[8];
	end
	if (
		( out_expected_prev[9] !== 1'bx ) && ( out_prev[9] !== out_expected_prev[9] )
		&& ((out_expected_prev[9] !== last_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[9] = out_expected_prev[9];
	end
	if (
		( out_expected_prev[10] !== 1'bx ) && ( out_prev[10] !== out_expected_prev[10] )
		&& ((out_expected_prev[10] !== last_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[10] = out_expected_prev[10];
	end
	if (
		( out_expected_prev[11] !== 1'bx ) && ( out_prev[11] !== out_expected_prev[11] )
		&& ((out_expected_prev[11] !== last_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[11] = out_expected_prev[11];
	end
	if (
		( out_expected_prev[12] !== 1'bx ) && ( out_prev[12] !== out_expected_prev[12] )
		&& ((out_expected_prev[12] !== last_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[12] = out_expected_prev[12];
	end
	if (
		( out_expected_prev[13] !== 1'bx ) && ( out_prev[13] !== out_expected_prev[13] )
		&& ((out_expected_prev[13] !== last_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[13] = out_expected_prev[13];
	end
	if (
		( out_expected_prev[14] !== 1'bx ) && ( out_prev[14] !== out_expected_prev[14] )
		&& ((out_expected_prev[14] !== last_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[14] = out_expected_prev[14];
	end
	if (
		( out_expected_prev[15] !== 1'bx ) && ( out_prev[15] !== out_expected_prev[15] )
		&& ((out_expected_prev[15] !== last_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[15] = out_expected_prev[15];
	end
	if (
		( out_expected_prev[16] !== 1'bx ) && ( out_prev[16] !== out_expected_prev[16] )
		&& ((out_expected_prev[16] !== last_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[16] = out_expected_prev[16];
	end
	if (
		( out_expected_prev[17] !== 1'bx ) && ( out_prev[17] !== out_expected_prev[17] )
		&& ((out_expected_prev[17] !== last_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[17] = out_expected_prev[17];
	end
	if (
		( out_expected_prev[18] !== 1'bx ) && ( out_prev[18] !== out_expected_prev[18] )
		&& ((out_expected_prev[18] !== last_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[18] = out_expected_prev[18];
	end
	if (
		( out_expected_prev[19] !== 1'bx ) && ( out_prev[19] !== out_expected_prev[19] )
		&& ((out_expected_prev[19] !== last_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[19] = out_expected_prev[19];
	end
	if (
		( out_expected_prev[20] !== 1'bx ) && ( out_prev[20] !== out_expected_prev[20] )
		&& ((out_expected_prev[20] !== last_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[20] = out_expected_prev[20];
	end
	if (
		( out_expected_prev[21] !== 1'bx ) && ( out_prev[21] !== out_expected_prev[21] )
		&& ((out_expected_prev[21] !== last_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[21] = out_expected_prev[21];
	end
	if (
		( out_expected_prev[22] !== 1'bx ) && ( out_prev[22] !== out_expected_prev[22] )
		&& ((out_expected_prev[22] !== last_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[22] = out_expected_prev[22];
	end
	if (
		( out_expected_prev[23] !== 1'bx ) && ( out_prev[23] !== out_expected_prev[23] )
		&& ((out_expected_prev[23] !== last_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[23] = out_expected_prev[23];
	end
	if (
		( out_expected_prev[24] !== 1'bx ) && ( out_prev[24] !== out_expected_prev[24] )
		&& ((out_expected_prev[24] !== last_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[24] = out_expected_prev[24];
	end
	if (
		( out_expected_prev[25] !== 1'bx ) && ( out_prev[25] !== out_expected_prev[25] )
		&& ((out_expected_prev[25] !== last_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[25] = out_expected_prev[25];
	end
	if (
		( out_expected_prev[26] !== 1'bx ) && ( out_prev[26] !== out_expected_prev[26] )
		&& ((out_expected_prev[26] !== last_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[26] = out_expected_prev[26];
	end
	if (
		( out_expected_prev[27] !== 1'bx ) && ( out_prev[27] !== out_expected_prev[27] )
		&& ((out_expected_prev[27] !== last_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[27] = out_expected_prev[27];
	end
	if (
		( out_expected_prev[28] !== 1'bx ) && ( out_prev[28] !== out_expected_prev[28] )
		&& ((out_expected_prev[28] !== last_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[28] = out_expected_prev[28];
	end
	if (
		( out_expected_prev[29] !== 1'bx ) && ( out_prev[29] !== out_expected_prev[29] )
		&& ((out_expected_prev[29] !== last_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[29] = out_expected_prev[29];
	end
	if (
		( out_expected_prev[30] !== 1'bx ) && ( out_prev[30] !== out_expected_prev[30] )
		&& ((out_expected_prev[30] !== last_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[30] = out_expected_prev[30];
	end
	if (
		( out_expected_prev[31] !== 1'bx ) && ( out_prev[31] !== out_expected_prev[31] )
		&& ((out_expected_prev[31] !== last_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_exp[31] = out_expected_prev[31];
	end
	if (
		( selDado_expected_prev !== 1'bx ) && ( selDado_prev !== selDado_expected_prev )
		&& ((selDado_expected_prev !== last_selDado_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selDado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selDado_expected_prev);
		$display ("     Real value = %b", selDado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_selDado_exp = selDado_expected_prev;
	end
	if (
		( tuo_expected_prev[0] !== 1'bx ) && ( tuo_prev[0] !== tuo_expected_prev[0] )
		&& ((tuo_expected_prev[0] !== last_tuo_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[0] = tuo_expected_prev[0];
	end
	if (
		( tuo_expected_prev[1] !== 1'bx ) && ( tuo_prev[1] !== tuo_expected_prev[1] )
		&& ((tuo_expected_prev[1] !== last_tuo_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[1] = tuo_expected_prev[1];
	end
	if (
		( tuo_expected_prev[2] !== 1'bx ) && ( tuo_prev[2] !== tuo_expected_prev[2] )
		&& ((tuo_expected_prev[2] !== last_tuo_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[2] = tuo_expected_prev[2];
	end
	if (
		( tuo_expected_prev[3] !== 1'bx ) && ( tuo_prev[3] !== tuo_expected_prev[3] )
		&& ((tuo_expected_prev[3] !== last_tuo_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[3] = tuo_expected_prev[3];
	end
	if (
		( tuo_expected_prev[4] !== 1'bx ) && ( tuo_prev[4] !== tuo_expected_prev[4] )
		&& ((tuo_expected_prev[4] !== last_tuo_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[4] = tuo_expected_prev[4];
	end
	if (
		( tuo_expected_prev[5] !== 1'bx ) && ( tuo_prev[5] !== tuo_expected_prev[5] )
		&& ((tuo_expected_prev[5] !== last_tuo_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[5] = tuo_expected_prev[5];
	end
	if (
		( tuo_expected_prev[6] !== 1'bx ) && ( tuo_prev[6] !== tuo_expected_prev[6] )
		&& ((tuo_expected_prev[6] !== last_tuo_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[6] = tuo_expected_prev[6];
	end
	if (
		( tuo_expected_prev[7] !== 1'bx ) && ( tuo_prev[7] !== tuo_expected_prev[7] )
		&& ((tuo_expected_prev[7] !== last_tuo_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[7] = tuo_expected_prev[7];
	end
	if (
		( tuo_expected_prev[8] !== 1'bx ) && ( tuo_prev[8] !== tuo_expected_prev[8] )
		&& ((tuo_expected_prev[8] !== last_tuo_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[8] = tuo_expected_prev[8];
	end
	if (
		( tuo_expected_prev[9] !== 1'bx ) && ( tuo_prev[9] !== tuo_expected_prev[9] )
		&& ((tuo_expected_prev[9] !== last_tuo_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[9] = tuo_expected_prev[9];
	end
	if (
		( tuo_expected_prev[10] !== 1'bx ) && ( tuo_prev[10] !== tuo_expected_prev[10] )
		&& ((tuo_expected_prev[10] !== last_tuo_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[10] = tuo_expected_prev[10];
	end
	if (
		( tuo_expected_prev[11] !== 1'bx ) && ( tuo_prev[11] !== tuo_expected_prev[11] )
		&& ((tuo_expected_prev[11] !== last_tuo_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[11] = tuo_expected_prev[11];
	end
	if (
		( tuo_expected_prev[12] !== 1'bx ) && ( tuo_prev[12] !== tuo_expected_prev[12] )
		&& ((tuo_expected_prev[12] !== last_tuo_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[12] = tuo_expected_prev[12];
	end
	if (
		( tuo_expected_prev[13] !== 1'bx ) && ( tuo_prev[13] !== tuo_expected_prev[13] )
		&& ((tuo_expected_prev[13] !== last_tuo_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[13] = tuo_expected_prev[13];
	end
	if (
		( tuo_expected_prev[14] !== 1'bx ) && ( tuo_prev[14] !== tuo_expected_prev[14] )
		&& ((tuo_expected_prev[14] !== last_tuo_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[14] = tuo_expected_prev[14];
	end
	if (
		( tuo_expected_prev[15] !== 1'bx ) && ( tuo_prev[15] !== tuo_expected_prev[15] )
		&& ((tuo_expected_prev[15] !== last_tuo_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[15] = tuo_expected_prev[15];
	end
	if (
		( tuo_expected_prev[16] !== 1'bx ) && ( tuo_prev[16] !== tuo_expected_prev[16] )
		&& ((tuo_expected_prev[16] !== last_tuo_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[16] = tuo_expected_prev[16];
	end
	if (
		( tuo_expected_prev[17] !== 1'bx ) && ( tuo_prev[17] !== tuo_expected_prev[17] )
		&& ((tuo_expected_prev[17] !== last_tuo_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[17] = tuo_expected_prev[17];
	end
	if (
		( tuo_expected_prev[18] !== 1'bx ) && ( tuo_prev[18] !== tuo_expected_prev[18] )
		&& ((tuo_expected_prev[18] !== last_tuo_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[18] = tuo_expected_prev[18];
	end
	if (
		( tuo_expected_prev[19] !== 1'bx ) && ( tuo_prev[19] !== tuo_expected_prev[19] )
		&& ((tuo_expected_prev[19] !== last_tuo_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[19] = tuo_expected_prev[19];
	end
	if (
		( tuo_expected_prev[20] !== 1'bx ) && ( tuo_prev[20] !== tuo_expected_prev[20] )
		&& ((tuo_expected_prev[20] !== last_tuo_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[20] = tuo_expected_prev[20];
	end
	if (
		( tuo_expected_prev[21] !== 1'bx ) && ( tuo_prev[21] !== tuo_expected_prev[21] )
		&& ((tuo_expected_prev[21] !== last_tuo_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[21] = tuo_expected_prev[21];
	end
	if (
		( tuo_expected_prev[22] !== 1'bx ) && ( tuo_prev[22] !== tuo_expected_prev[22] )
		&& ((tuo_expected_prev[22] !== last_tuo_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[22] = tuo_expected_prev[22];
	end
	if (
		( tuo_expected_prev[23] !== 1'bx ) && ( tuo_prev[23] !== tuo_expected_prev[23] )
		&& ((tuo_expected_prev[23] !== last_tuo_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[23] = tuo_expected_prev[23];
	end
	if (
		( tuo_expected_prev[24] !== 1'bx ) && ( tuo_prev[24] !== tuo_expected_prev[24] )
		&& ((tuo_expected_prev[24] !== last_tuo_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[24] = tuo_expected_prev[24];
	end
	if (
		( tuo_expected_prev[25] !== 1'bx ) && ( tuo_prev[25] !== tuo_expected_prev[25] )
		&& ((tuo_expected_prev[25] !== last_tuo_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[25] = tuo_expected_prev[25];
	end
	if (
		( tuo_expected_prev[26] !== 1'bx ) && ( tuo_prev[26] !== tuo_expected_prev[26] )
		&& ((tuo_expected_prev[26] !== last_tuo_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[26] = tuo_expected_prev[26];
	end
	if (
		( tuo_expected_prev[27] !== 1'bx ) && ( tuo_prev[27] !== tuo_expected_prev[27] )
		&& ((tuo_expected_prev[27] !== last_tuo_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[27] = tuo_expected_prev[27];
	end
	if (
		( tuo_expected_prev[28] !== 1'bx ) && ( tuo_prev[28] !== tuo_expected_prev[28] )
		&& ((tuo_expected_prev[28] !== last_tuo_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[28] = tuo_expected_prev[28];
	end
	if (
		( tuo_expected_prev[29] !== 1'bx ) && ( tuo_prev[29] !== tuo_expected_prev[29] )
		&& ((tuo_expected_prev[29] !== last_tuo_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[29] = tuo_expected_prev[29];
	end
	if (
		( tuo_expected_prev[30] !== 1'bx ) && ( tuo_prev[30] !== tuo_expected_prev[30] )
		&& ((tuo_expected_prev[30] !== last_tuo_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[30] = tuo_expected_prev[30];
	end
	if (
		( tuo_expected_prev[31] !== 1'bx ) && ( tuo_prev[31] !== tuo_expected_prev[31] )
		&& ((tuo_expected_prev[31] !== last_tuo_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tuo[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tuo_expected_prev);
		$display ("     Real value = %b", tuo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tuo_exp[31] = tuo_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module media_movel2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkFPGA;
reg [9:0] dado;
reg insereDado;
// wires                                               
wire accDado;
wire [31:0] out;
wire PWM;
wire selDado;
wire [31:0] tuo;

wire sampler;                             

// assign statements (if any)                          
media_movel2 i1 (
// port map - connection between master ports and signals/registers   
	.accDado(accDado),
	.clkFPGA(clkFPGA),
	.dado(dado),
	.insereDado(insereDado),
	.out(out),
	.PWM(PWM),
	.selDado(selDado),
	.tuo(tuo)
);

// clkFPGA
always
begin
	clkFPGA = 1'b0;
	clkFPGA = #10000 1'b1;
	#10000;
end 
// dado[ 9 ]
initial
begin
	dado[9] = 1'b0;
	dado[9] = #3840000 1'b1;
	dado[9] = #55040000 1'b0;
end 
// dado[ 8 ]
initial
begin
	dado[8] = 1'b0;
	dado[8] = #3840000 1'b1;
	dado[8] = #55040000 1'b0;
end 
// dado[ 7 ]
initial
begin
	dado[7] = 1'b0;
	dado[7] = #3840000 1'b1;
	dado[7] = #55040000 1'b0;
end 
// dado[ 6 ]
initial
begin
	dado[6] = 1'b0;
	dado[6] = #3840000 1'b1;
	dado[6] = #76800000 1'b0;
end 
// dado[ 5 ]
initial
begin
	dado[5] = 1'b0;
	dado[5] = #3840000 1'b1;
	dado[5] = #55040000 1'b0;
end 
// dado[ 4 ]
initial
begin
	dado[4] = 1'b0;
	dado[4] = #3840000 1'b1;
	dado[4] = #33280000 1'b0;
	dado[4] = #21760000 1'b1;
	dado[4] = #21760000 1'b0;
end 
// dado[ 3 ]
initial
begin
	dado[3] = 1'b0;
	dado[3] = #3840000 1'b1;
	dado[3] = #33280000 1'b0;
	dado[3] = #21760000 1'b1;
	dado[3] = #21760000 1'b0;
end 
// dado[ 2 ]
initial
begin
	dado[2] = 1'b0;
	dado[2] = #3840000 1'b1;
	dado[2] = #55040000 1'b0;
end 
// dado[ 1 ]
initial
begin
	dado[1] = 1'b0;
	dado[1] = #3840000 1'b1;
	dado[1] = #76800000 1'b0;
end 
// dado[ 0 ]
initial
begin
	dado[0] = 1'b0;
	dado[0] = #3840000 1'b1;
	dado[0] = #76800000 1'b0;
end 

// insereDado
initial
begin
	insereDado = 1'b0;
	insereDado = #7680000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #6400000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #6400000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #8960000 1'b1;
	insereDado = #2560000 1'b0;
	insereDado = #8960000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #6400000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #7680000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #10240000 1'b1;
	insereDado = #1280000 1'b0;
	insereDado = #11520000 1'b1;
	insereDado = #2560000 1'b0;
end 

media_movel2_vlg_sample_tst tb_sample (
	.clkFPGA(clkFPGA),
	.dado(dado),
	.insereDado(insereDado),
	.sampler_tx(sampler)
);

media_movel2_vlg_check_tst tb_out(
	.accDado(accDado),
	.out(out),
	.PWM(PWM),
	.selDado(selDado),
	.tuo(tuo),
	.sampler_rx(sampler)
);
endmodule

